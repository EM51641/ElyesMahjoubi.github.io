{"ast":null,"code":"import _classCallCheck from \"/Users/elyes/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Desktop - Elyes\\u2019s MacBook Pro/Projects/Git_page/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/elyes/Library/Mobile Documents/com~apple~CloudDocs/Desktop/Desktop - Elyes\\u2019s MacBook Pro/Projects/Git_page/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport SequentialIDGenerator from \"./sequential-id-generator\";\nimport sortMq from \"./sort-css-media-queries\";\nexport var MultiCache = /*#__PURE__*/function () {\n  function MultiCache(idGenerator, onNewCache, onNewValue) {\n    _classCallCheck(this, MultiCache);\n\n    this.idGenerator = idGenerator;\n    this.onNewCache = onNewCache;\n    this.onNewValue = onNewValue;\n    this.sortedCacheKeys = [];\n    this.caches = {};\n  }\n\n  _createClass(MultiCache, [{\n    key: \"getCache\",\n    value: function getCache(key) {\n      if (!this.caches[key]) {\n        var cache = new Cache(this.idGenerator, this.onNewValue);\n        cache.key = key;\n        this.sortedCacheKeys.push(key);\n        this.sortedCacheKeys.sort(sortMq);\n        var keyIndex = this.sortedCacheKeys.indexOf(key);\n        var insertBeforeMedia = keyIndex < this.sortedCacheKeys.length - 1 ? this.sortedCacheKeys[keyIndex + 1] : void 0;\n        this.caches[key] = cache;\n        this.onNewCache(key, cache, insertBeforeMedia);\n      }\n\n      return this.caches[key];\n    }\n  }, {\n    key: \"getSortedCacheKeys\",\n    value: function getSortedCacheKeys() {\n      return this.sortedCacheKeys;\n    }\n  }]);\n\n  return MultiCache;\n}();\nexport var Cache = /*#__PURE__*/function () {\n  function Cache(idGenerator, onNewValue) {\n    _classCallCheck(this, Cache);\n\n    this.cache = {};\n    this.idGenerator = idGenerator;\n    this.onNewValue = onNewValue;\n  }\n\n  _createClass(Cache, [{\n    key: \"addValue\",\n    value: function addValue(key, value) {\n      var cached = this.cache[key];\n\n      if (cached) {\n        return cached;\n      }\n\n      var id = this.idGenerator.next();\n      this.cache[key] = id;\n      this.onNewValue(this, id, value);\n      return id;\n    }\n  }]);\n\n  return Cache;\n}();","map":null,"metadata":{},"sourceType":"module"}